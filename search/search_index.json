{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Formal Methods","text":""},{"location":"contributors/","title":"Contributors","text":"<p>Nicol\u00e1s Arqueros, Alex Byaly, Dan Bornside, Manuel Chakravarty, James Chapman, Nicholas Clarke, Jared Corduan, Duncan Coutts, William DeMeo, Marko Dimja\u0161evi\u0107, Nicolas Di Prima, Ruslan Dudin, Matthias G\u00fcdemann, Sebastien Guillemot, Kevin Hammond, Vincent Hanquez, Alasdair Hill, Ru Horlick, Michael Hueschen, Joosep J\u00e4\u00e4ger, Philipp Kant, Andre Knispel, Ryan Lemmer, Christian Lindgren, Yun Lu, Orestis Melkonian, Jordan Millar, Jean-Christophe Mincke, Jann Mueller, Damian Nadales, Ulf Norell, Michal Peyton Jones, Ashish Prajapati, Tim Sheard, Carlos Tom\u00e9 Corti\u00f1as, Polina Vinogradova, Andrew Westberg.</p> <p>If you've contributed to the ledger but we've failed to list you here, please send us a message or post an issue.</p>"},{"location":"license/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"mkdocs/","title":"MkDocs","text":""},{"location":"mkdocs/#references","title":"References","text":"<ul> <li>MkDocs</li> <li>MkDocs Material</li> <li>Getting Started with Material for MkDocs, by James Willet.</li> </ul>"},{"location":"cardano-ledger/intro/","title":"Introduction","text":"<p>This document is a formal specification of the functionality of the ledger on the Cardano blockchain. This includes the blockchain layer determining what is a valid block, but does not include any concurrency issues such as chain selection. The details of the background and the larger context for the design decisions formalized in this document are presented in Appendix Section\u00a0shelley-delegation-design.</p> <p>In this document, we present the most important properties that any implementation of the ledger must have. Specifically, we model the following aspects of the functionality of the ledger on the blockchain:</p> <p>In defining Cardano, we are concerned with the means to construct inductive datatypes satisfying some validity conditions. For example, we wish to consider when a sequence of transactions forms a valid ledger, or a sequence of blocks forms a valid chain.</p> <p>This document describes the methods we use to define such validity conditions and how they result in the construction of valid states. In particular, we define inference rules for operations on a blockchain as a specification of the blockchain layer of Cardano. A block validity definition is given, which is accompanied by small-step operational semantics inference rules.</p> <p>The idea behind this document is to formalise what it means for a new block, to be added to the blockchain, to be valid. Unless a new block is valid, it cannot be added to the blockchain and thereby extend it. This is needed for a system that is subscribed to the blockchain and keeps a copy of it locally.</p> <p>Each block is made up of transactions and this specification models the conditions that the different parts of a transaction must fulfill so that they can extend a ledger, which is represented here as a list of transactions. In particular, we model the following aspects:</p> <p>Preservation of value</p> <p>:   relationship between the total value of input and outputs in a new     transaction, and the unspent outputs.</p> <p>Witnesses</p> <p>:   authentication of parts of the transaction data by means of     cryptographic entities (such as signatures and private keys)     contained in these transactions.</p> <p>Delegation</p> <p>:   validity of delegation certificates, which delegate block-signing     rights.</p> <p>Update validation</p> <p>:   voting mechanism which captures the identification of the voters,     and the participants that can post update proposals.</p> <p>Stake</p> <p>:   staking rights associated to an addresses.</p> <pre><code>&lt;!-- --&gt;\n</code></pre> <p>Preservation of value</p> <p>:   Every coin in the system must be accounted for, and the total amount     is unchanged by every transaction and epoch change. In particular,     every coin is accounted for by exactly one of the following     categories:</p> <pre><code>-   Circulation (UTxO)\n\n-   Deposit pot\n\n-   Fee pot\n\n-   Reserves (monetary expansion)\n\n-   Rewards (account addresses)\n\n-   Treasury\n</code></pre> <p>Witnesses</p> <p>:   Authentication of parts of the transaction data by means of     cryptographic entities (such as signatures and private keys)     contained in these transactions.</p> <p>Delegation</p> <p>:   Validity of delegation certificates, which delegate block-signing     rights.</p> <p>Stake</p> <p>:   Staking rights associated to an address.</p> <p>Rewards</p> <p>:   Reward calculation and distribution.</p> <p>Updates</p> <p>:   The update mechanism for Shelley protocol parameters and software.</p> <p>While the blockchain protocol is a reactive system that is driven by the arrival of blocks causing updates to the ledger, the formal description is a collection of rules that compose a static description of what a valid ledger is. A valid ledger state can only be reached by applying a sequence of inference rules and any valid ledger state is reachable by applying some sequence of these rules. The specifics of the semantics we use to define and apply the rules we present in this document are explained in detail in [@small-step-semantics] (this document will really help the reader's understanding of the contents of this specification).</p> <p>The structure of the rules that we give here is such that their application is deterministic. That is, given a specific initial state and relevant environmental constants, there is no ambiguity about which rule should be applied at any given time (i.e.\u00a0which state transition is allowed to take place). This property ensures that the specification is totally precise --- no choice is left to the implementor and any two implementations must behave the same when it comes to deciding whether a block is valid.</p>"},{"location":"cardano-ledger/shelley/intro/","title":"Intro","text":"<p>This document is a formal specification of the functionality of the ledger on the blockchain. This includes the blockchain layer determining what is a valid block, but does not include any concurrency issues such as chain selection. The details of the background and the larger context for the design decisions formalized in this document are presented in\u00a0[@shelley-delegation-design].</p> <p>In this document, we present the most important properties that any implementation of the ledger must have. Specifically, we model the following aspects of the functionality of the ledger on the blockchain:</p> <p>Preservation of value</p> <p>:   Every coin in the system must be accounted for, and the total amount     is unchanged by every transaction and epoch change. In particular,     every coin is accounted for by exactly one of the following     categories:</p> <pre><code>-   Circulation (UTxO)\n\n-   Deposit pot\n\n-   Fee pot\n\n-   Reserves (monetary expansion)\n\n-   Rewards (account addresses)\n\n-   Treasury\n</code></pre> <p>Witnesses</p> <p>:   Authentication of parts of the transaction data by means of     cryptographic entities (such as signatures and private keys)     contained in these transactions.</p> <p>Delegation</p> <p>:   Validity of delegation certificates, which delegate block-signing     rights.</p> <p>Stake</p> <p>:   Staking rights associated to an address.</p> <p>Rewards</p> <p>:   Reward calculation and distribution.</p> <p>Updates</p> <p>:   The update mechanism for Shelley protocol parameters and software.</p> <p>While the blockchain protocol is a reactive system that is driven by the arrival of blocks causing updates to the ledger, the formal description is a collection of rules that compose a static description of what a valid ledger is. A valid ledger state can only be reached by applying a sequence of inference rules and any valid ledger state is reachable by applying some sequence of these rules. The specifics of the semantics we use to define and apply the rules we present in this document are explained in detail in [@small-step-semantics] (this document will really help the reader's understanding of the contents of this specification).</p> <p>The structure of the rules that we give here is such that their application is deterministic. That is, given a specific initial state and relevant environmental constants, there is no ambiguity about which rule should be applied at any given time (i.e.\u00a0which state transition is allowed to take place). This property ensures that the specification is totally precise --- no choice is left to the implementor and any two implementations must behave the same when it comes to deciding whether a block is valid.</p>"},{"location":"crypto/","title":"FM Crypto","text":"<ul> <li>Formalizing the One-time Pad in Lean</li> </ul>"},{"location":"crypto/Mathlib/list-and-vector/","title":"List and Vector in Mathlib","text":"<p>Tip: Use the Mathlib documentation website for easy browsing of module contents and definitions.</p>"},{"location":"crypto/Mathlib/list-and-vector/#datalist","title":"<code>Data.List</code>","text":"<ul> <li> <p>In <code>Mathlib/Data/List/Basic.lean</code> and other files in <code>Mathlib/Data/List/</code>.</p> </li> <li> <p>While <code>Vector</code> is likely better for fixed-length crypto primitives, <code>List \u03b1</code> is    the standard list type. </p> </li> <li> <p>Good to know its API (e.g., <code>map</code>, <code>zipWith</code>, <code>length</code>) as <code>Vector</code> often mirrors    or builds upon <code>List</code> concepts.</p> </li> </ul>"},{"location":"crypto/Mathlib/list-and-vector/#datavector","title":"<code>Data.Vector</code>","text":"<ul> <li> <p>Located in <code>Mathlib/Data/Vector/Basic.lean</code>.</p> </li> <li> <p><code>Vector \u03b1 n</code>: Represents a list of elements of type <code>\u03b1</code> that is known to have length <code>n</code>. </p> </li> </ul> <p>Very suitable for plaintexts, keys, and ciphertexts where length is fixed and equal.</p> <ul> <li> <p>Useful functions:</p> <ul> <li><code>Vector.map (f : \u03b1 \u2192 \u03b2) : Vector \u03b1 n \u2192 Vector \u03b2 n</code></li> <li><code>Vector.map\u2082 (f : \u03b1 \u2192 \u03b2 \u2192 \u03b3) : Vector \u03b1 n \u2192 Vector \u03b2 n \u2192 Vector \u03b3 n</code>,      perfect for XORing two vectors. </li> <li><code>Vector.get : Vector \u03b1 n \u2192 Fin n \u2192 \u03b1</code> to get an element at an index.</li> <li><code>Vector.ofFn : ((i : Fin n) \u2192 \u03b1) \u2192 Vector \u03b1 n</code> to construct a vector from a function.</li> <li>Literals like <code>![a, b, c]</code> can often be coerced to <code>Vector \u03b1 3</code> if the type is known.</li> </ul> </li> </ul>"},{"location":"crypto/Mathlib/prob/","title":"Probability in L\u2203\u2200N","text":""},{"location":"crypto/Mathlib/prob/#basic-definitions-of-probability-theory","title":"\ud83c\udfb2 Basic Definitions of Probability Theory","text":"<ul> <li> <p>\u03a9 denotes an outcome space </p> </li> <li> <p>\u03c9 \u2208 \u03a9 denotes an outcome (e.g., of an experiment, trial, etc.)</p> </li> <li> <p>An event \ud835\udc38 is a set of outcomes: \ud835\udc38 \u2286 \u03a9</p> </li> <li> <p>A probability mass function (pmf), or probability measure, on an outcome space is    a function \u2119 : \u03a9 \u2192 \u211d such that, for all events \ud835\udc38\u2080, \ud835\udc38\u2081, \u2026</p> </li> <li>\u2119 \u2205 = 0 and \u2119 \u03a9 = 1 </li> <li>0 \u2264 \u2119 \ud835\udc38\u1d62 \u2264 1 </li> <li>\ud835\udc38\u1d62 \u2286 \ud835\udc38\u2c7c \u2192 \u2119 \ud835\udc38\u1d62 \u2264 \u2119 \ud835\udc38\u2c7c (monotone)</li> <li>\u2119(\u22c3 \ud835\udc38\u1d62) \u2264 \u2211 \u2119 \ud835\udc38\u1d62 (subadditive)</li> </ul> <p>Mathlib's definition</p> <p>It's slightly more direct: it's a function <code>f : \u03b1 \u2192 NNReal</code> (non-negative reals) along with a proof <code>h : tsum f = 1</code> (the sum of <code>f a</code> over all <code>a : \u03b1</code> is 1). The other properties above (like monotonicity, probability of empty set being 0, etc.) can be derived from this.</p>"},{"location":"crypto/Mathlib/prob/#basic-probability-in-mathlib","title":"Basic Probability in Mathlib","text":"<p><code>Probability/ProbabilityMassFunction/</code></p> <p>\ud83d\udcc1 <code>Mathlib/Probability/ProbabilityMassFunction/Basic.lean</code></p> <ul> <li> <p>Often imported as <code>PMF</code>.</p> </li> <li> <p>It's the main tool for defining discrete random variables and their distributions.</p> </li> </ul> <p>\ud83d\udd11\ufe0f Key Concepts</p> <ul> <li> <p><code>PMF \u03b1</code> represents a probability mass function (pmf) over a type <code>\u03b1</code>;    it's a function <code>\u03b1 \u2192 NNReal</code> (non-negative reals) where the sum over all <code>a : \u03b1</code> is 1.</p> </li> <li> <p><code>PMF.pure (a : \u03b1)</code> is a pmf with all mass at <code>a</code> (prob 1 for <code>a</code>, 0 otherwise).</p> </li> <li> <p><code>PMF.bind (p : PMF \u03b1) (f : \u03b1 \u2192 PMF \u03b2)</code> is used for creating dependent r.v.s;    given a r.v. <code>p</code> and function <code>f</code> mapping outcomes of <code>p</code> to new r.v.s, <code>bind</code> gives the resulting distribution on <code>\u03b2</code>.</p> </li> <li> <p><code>PMF.map (f : \u03b1 \u2192 \u03b2) (p : PMF \u03b1)</code>: If we apply a function <code>f</code> to the outcomes    of a r.v. <code>p</code>, <code>map</code> gives the pmf of the results.</p> </li> </ul>"},{"location":"crypto/Mathlib/prob/#conditional-probability-in-mathlib","title":"Conditional Probability in Mathlib","text":"<p>\ud83d\udcc1 <code>Mathlib/Probability/ConditionalProbability.lean</code></p> <p><code>Probability.ConditionalProbability</code></p> <ul> <li> <p><code>cond</code> is the conditional probability measure of measure <code>\u03bc</code> on set <code>s</code></p> </li> <li> <p>it is <code>\u03bc</code> restricted to <code>s</code> and scaled by the inverse of <code>\u03bc s</code> (to make it a    probability measure): <code>(\u03bc s)\u207b\u00b9 \u2022 \u03bc.restrict s</code></p> </li> <li> <p><code>cond (p : PMF \u03b1) (E : Set \u03b1)</code> gives the conditional pmf given an event <code>E</code> &lt;&lt;== check this!!</p> </li> </ul> <p>we'll use it to define \\(P(M=m \\; | \\; C=c)\\)</p> <p>Other notable files</p> <ul> <li><code>Probability/ConditionalExpectation.lean</code> conditional expectation</li> <li><code>Probability/CondVar.lean</code> conditional variance</li> <li><code>Probability/Independence/Conditional.lean</code> conditional independence </li> </ul>"},{"location":"crypto/Mathlib/vector-and-list/","title":"Vector and List in Mathlib","text":"<p>Tip</p> <p>Use the Mathlib documentation website for easy browsing of module contents and definitions.</p> <p>https://leanprover-community.github.io/mathlib4_docs/index.html</p>"},{"location":"crypto/Mathlib/vector-and-list/#datavector","title":"<code>Data/Vector/</code>","text":"<p>\ud83d\udcc1 <code>Mathlib/Data/Vector/Basic.lean</code>.</p> <ul> <li><code>Vector \u03b1 n</code> represents a list of elements of type <code>\u03b1</code> that is known to have length <code>n</code>.     Well suited to plaintexts, keys, and ciphertexts where length is fixed and equal.</li> </ul> <p>\ud83e\uddf0 Useful functions</p> <ul> <li><code>Vector.map (f : \u03b1 \u2192 \u03b2) : Vector \u03b1 n \u2192 Vector \u03b2 n</code></li> <li><code>Vector.map\u2082 (f : \u03b1 \u2192 \u03b2 \u2192 \u03b3) : Vector \u03b1 n \u2192 Vector \u03b2 n \u2192 Vector \u03b3 n</code>,    perfect for XORing two vectors. </li> <li><code>Vector.get : Vector \u03b1 n \u2192 Fin n \u2192 \u03b1</code> to get an element at an index.</li> <li><code>Vector.ofFn : ((i : Fin n) \u2192 \u03b1) \u2192 Vector \u03b1 n</code> to construct a vector from a function.</li> <li>Literals like <code>![a, b, c]</code> can often be coerced to <code>Vector \u03b1 3</code> if the type is known.</li> </ul>"},{"location":"crypto/Mathlib/vector-and-list/#datalist","title":"<code>Data/List/</code>","text":"<ul> <li> <p>In <code>Mathlib/Data/List/Basic.lean</code> and other files in <code>Mathlib/Data/List/</code>.</p> </li> <li> <p>While <code>Vector</code> is likely better for fixed-length crypto primitives, <code>List \u03b1</code> is    the standard list type. </p> </li> <li> <p>Good to know its API (e.g., <code>map</code>, <code>zipWith</code>, <code>length</code>) as <code>Vector</code> often mirrors    or builds upon <code>List</code> concepts.</p> </li> </ul>"},{"location":"crypto/otp/basics/","title":"Basics","text":""},{"location":"crypto/otp/basics/#what-is-the-one-time-pad-otp","title":"What is the One-Time Pad (OTP)?","text":"<p>A theoretically unbreakable (\"perfect secrecy\") encryption technique with very specific requirements.</p> <p>The Key must be</p> <ul> <li>truly random</li> <li>at least as long as the plaintext message</li> <li>used only once</li> <li>kept secret between sender and receiver</li> </ul>"},{"location":"crypto/otp/basics/#encryption","title":"Encryption","text":"<ul> <li>plaintext message. typically converted into a sequence of bits (or numbers)</li> <li>key. also a sequence of bits (or numbers) of the same length</li> <li>encryption. performed by combining plaintext with key using a simple operation, most commonly bitwise XOR.</li> </ul> <p>If using numbers (e.g., letters A=0, B=1, ... Z=25), modular addition is used.</p> <ul> <li><code>Ciphertext = Plaintext XOR Key</code> (for bits)</li> <li><code>Ciphertext = (Plaintext + Key) mod N</code> (for numbers modulo N)</li> </ul>"},{"location":"crypto/otp/basics/#decryption","title":"Decryption","text":"<p>uses the same key and the reverse operation</p> <ul> <li><code>Plaintext = Ciphertext XOR Key</code> (because <code>(P XOR K) XOR K = P</code>)</li> <li><code>Plaintext = (Ciphertext - Key) mod N</code></li> </ul>"},{"location":"crypto/otp/basics/#perfect-secrecy","title":"Perfect Secrecy","text":"<p>The core theoretical property of OTP is </p> <p>The ciphertext provides no information (other than max length) about the plaintext content.</p> <ul> <li> <p>Formally, \\(P(\\text{plaintext} = m \\; | \\; \\text{ciphertext} = c) = P(\\text{plaintext} = m)\\).</p> </li> <li> <p>Knowing \\(c\\) doesn't change the probability distribution of the plaintext \\(m\\).</p> </li> <li> <p>This holds only if all the conditions for the key are met (random, same length, used once).</p> </li> </ul>"},{"location":"crypto/otp/basics/#why-otp-is-interesting-to-cryptographers","title":"Why OTP is interesting to cryptographers","text":"<ul> <li> <p>Highlights critical importance of key management (randomness, length,    single-use, secrecy).</p> </li> <li> <p>Most practical ciphers try to achieve similar security with    shorter, reusable keys. (much harder)</p> </li> <li> <p>Understanding limitations of OTP motivates study of other cryptographic systems.</p> </li> </ul>"},{"location":"crypto/otp/basics/#feasibility-of-formalizing-otp-in-lean","title":"Feasibility of Formalizing OTP in Lean","text":"<p>Formalizing the One-Time Pad in Lean is highly feasible and useful as a PoC, providing a concrete example of verifying a security property.</p> <ul> <li> <p>Simple Operations. The core operations (XOR, modular addition) are already    well-defined or easy to define in Lean. Mathlib has <code>Bool.xor</code> and <code>ZMod N</code> for modular arithmetic.</p> </li> <li> <p>Clear Definitions: We can define types for plaintexts, keys, and ciphertexts     (e.g., <code>List Bool</code>, <code>Vector Bool n</code>, or functions <code>Fin n \u2192 Bool</code>).</p> </li> <li> <p>Focus on a Key Property. The main goal would be to formalize and prove its    perfect secrecy, a non-trivial but achievable result that would be very compelling.</p> </li> <li> <p>Mathlib Support. Mathlib has a growing library for probability theory on    finite types (<code>Mathlib.Probability.ProbabilityMassFunction</code>), which is essential    for proving perfect secrecy. We don't need to build from scratch! </p> </li> </ul>"},{"location":"crypto/otp/basics/#what-to-formalize","title":"What to Formalize","text":"<ol> <li> <p>Define message space, key space, ciphertext space.      For simplicity, use <code>Vector Bool n</code> (vectors of Booleans of fixed length <code>n</code>).</p> </li> <li> <p>Define encrypt and decrypt functions.      (e.g., element-wise XOR for <code>Vector Bool n</code>).</p> </li> <li> <p>State assumptions about key.</p> <ul> <li> <p>chosen uniformly at random from the key space</p> </li> <li> <p>independent of plaintext</p> </li> </ul> </li> <li> <p>Formalize definition of perfect secrecy.</p> \\[P(M=m \\; | \\; C=c) = P(M=m)\\] <p>Involves defining probability mass functions for message and key, and conditional probability.</p> </li> <li> <p>Prove our OTP implementation satisfies perfect secrecy under the stated assumptions.</p> </li> </ol>"},{"location":"crypto/otp/construction/","title":"OTP: Construction","text":"<p>Definition of _\u2295_</p> <p>_\u2295_ is bitwise XOR: \\(\\quad 0 \u2295 0 = 0, \\quad 0 \u2295 1 = 1, \\quad 1 \u2295 0 = 1, \\quad 1 \u2295 1 = 0\\).</p> <p>For n-bit strings \\(\\; a = a\u2081 \u22ef a_n\\), \\(\\; b = b\u2081 \u22ef b_n\\) , let \\(\\; a \u2295 b = a\u2081 \u2295 b\u2081 \u22ef a_n \u2295 b_n\\).</p> Cayley table of _\u2295_ \u2295 0 1 0 0 1 1 1 0 <p>An important property of _\u2295_</p> <p>\\(a \u2295 b = c \u21d4 a = b \u2295 c\\), for all \\(a\\), \\(b\\), \\(c\\). </p> <p>Fix an integer \\(n &gt; 0\\). </p> <p>Let \\(\u2133\\) be the message space , \\(\ud835\udca6\\) the key space, and \\(\ud835\udc9e\\) the ciphertext space.</p> <p>Assume \\(\u2133\\), \\(\ud835\udca6\\), \\(\ud835\udc9e\\) all equal \\(\\{0, 1\\}^n\\).</p> <ul> <li> <p>Gen (key-generation algorithm) choose key from uniform distribution over \\(\ud835\udca6\\).</p> </li> <li> <p>Enc (encryption algorithm) given \\(k \u2208 \ud835\udca6\\), \\(m \u2208 \u2133\\),  output ciphertext \\(c = k \u2295 m\\).</p> </li> <li> <p>Dec (decryption algorithm) given \\(k \u2208 \ud835\udca6\\), \\(c \u2208 \ud835\udc9e\\), output message \\(m = k \u2295 c\\).</p> </li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/","title":"Formalizing Discrete Probability in Lean 4: The One-Time Pad","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#fm-crypto-meeting","title":"FM Crypto Meeting","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#overview","title":"Overview","text":"<ul> <li>Goal: Formalize basic discrete probability in Lean 4</li> <li>Case Study: One-Time Pad (OTP) and Perfect Secrecy</li> <li>Key Concepts:</li> <li>Probability Mass Functions (PMFs)</li> <li>Independence and joint distributions</li> <li>Conditional probability</li> <li>Bijections preserving uniform distributions</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#the-one-time-pad","title":"The One-Time Pad","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#informal-definition","title":"Informal Definition","text":"<ul> <li>Message space: \\(M = \\{0,1\\}^n\\)</li> <li>Key space: \\(K = \\{0,1\\}^n\\) </li> <li>Ciphertext space: \\(C = \\{0,1\\}^n\\)</li> <li>Encryption: \\(\\text{Enc}(m, k) = m \\oplus k\\)</li> <li>Decryption: \\(\\text{Dec}(c, k) = c \\oplus k\\)</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#key-property","title":"Key Property","text":"\\[\\text{Dec}(\\text{Enc}(m, k), k) = (m \\oplus k) \\oplus k = m\\]"},{"location":"crypto/otp/interleaved_demo_presentation/#lean-4-formalization-types","title":"Lean 4 Formalization: Types","text":"<pre><code>import Mathlib.Data.Vector.Basic\n\ndef Plaintext  (n : Nat) := List.Vector Bool n\ndef Key        (n : Nat) := List.Vector Bool n  \ndef Ciphertext (n : Nat) := List.Vector Bool n\n\n-- Element-wise XOR\ndef vec_xor {n : Nat} (v\u2081 v\u2082 : List.Vector Bool n) := \n  map\u2082 xor v\u2081 v\u2082\n\ndef encrypt {n : Nat} (m : Plaintext n) (k : Key n) : Ciphertext n :=\n  vec_xor m k\n</code></pre>"},{"location":"crypto/otp/interleaved_demo_presentation/#let-me-show-you-this-in-action","title":"Let me show you this in action...","text":"<pre><code>-- Demo 1: Basic OTP Operations\nsection BasicOTP\n  open OTP\n\n  -- Create a 4-bit message\n  def demo_msg : Plaintext 4 := \u27e8[true, false, true, true], by decide\u27e9\n  def demo_key : Key 4 := \u27e8[false, true, false, true], by decide\u27e9\n\n  -- Show encryption\n  #eval encrypt demo_msg demo_key\n  -- Output: [true, true, true, false]\n\n  -- Show decryption recovers the message\n  #eval decrypt (encrypt demo_msg demo_key) demo_key\n  -- Output: [true, false, true, true]\n\n  -- Show that different keys give different ciphertexts\n  def demo_key2 : Key 4 := \u27e8[true, true, false, false], by decide\u27e9\n  #eval encrypt demo_msg demo_key2\n  -- Output: [false, true, true, true]\nend BasicOTP\n</code></pre> <p>Key points to emphasize: Notice how the same message encrypted with different keys produces completely different ciphertexts!</p>"},{"location":"crypto/otp/interleaved_demo_presentation/#correctness-of-encryptiondecryption","title":"Correctness of Encryption/Decryption","text":"<pre><code>lemma encrypt_decrypt {n : Nat} (m : Plaintext n) (k : Key n) :\n  decrypt (encrypt m k) k = m := by\n  unfold encrypt decrypt vec_xor\n  apply ext  -- vector extensionality\n  intro i    -- prove element-wise\n  simp only [get_map\u2082]\n  -- Goal: xor (xor (get m i) (get k i)) (get k i) = get m i\n  simp  -- Uses xor properties automatically\n</code></pre> <p>Key insight: Reduce vector equality to element-wise boolean equality</p>"},{"location":"crypto/otp/interleaved_demo_presentation/#lets-explore-the-xor-properties-that-make-this-work","title":"Let's explore the XOR properties that make this work...","text":"<pre><code>-- Demo 2: XOR Properties\nsection XORProperties\n  open OTP Bool\n\n  -- Interactive proof that XOR is self-inverse\n  example (a b : Bool) : xor (xor a b) b = a := by\n    -- Let's explore the proof interactively\n    rw [xor_assoc]\n    -- Goal: xor a (xor b b) = a\n    rw [xor_self]\n    -- Goal: xor a false = a\n    rw [xor_false]\n    -- Done!\n\n  -- Another way using simp\n  example (a b : Bool) : xor (xor a b) b = a := by simp\nend XORProperties\n</code></pre> <p>Teaching moment: Lean can automatically find these properties, but stepping through shows us exactly why decryption works!</p>"},{"location":"crypto/otp/interleaved_demo_presentation/#probability-mass-functions-in-lean-4","title":"Probability Mass Functions in Lean 4","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#mathlibs-pmf-type","title":"Mathlib's PMF type","text":"<pre><code>import Mathlib.Probability.ProbabilityMassFunction.Constructions\n\n-- PMF \u03b1 represents discrete probability distributions over \u03b1\n-- (\u03bc : PMF \u03b1) assigns probability \u03bc a to element a : \u03b1\n</code></pre>"},{"location":"crypto/otp/interleaved_demo_presentation/#uniform-distribution-over-keys","title":"Uniform distribution over keys","text":"<pre><code>noncomputable def \u03bcK {n : \u2115} : PMF (Key n) :=\n  uniformOfFintype (Key n)\n\n-- For any key k: \u03bcK k = 1 / 2^n\n</code></pre>"},{"location":"crypto/otp/interleaved_demo_presentation/#independence-and-joint-distributions","title":"Independence and Joint Distributions","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#independent-product-of-pmfs","title":"Independent product of PMFs","text":"<pre><code>noncomputable def \u03bcMK {n : \u2115} (\u03bcM : PMF (Plaintext n)) : \n  PMF (Plaintext n \u00d7 Key n) :=\n  PMF.bind \u03bcM (fun m =&gt; PMF.map (fun k =&gt; (m, k)) \u03bcK)\n\n-- P(M = m, K = k) = P(M = m) \u00b7 P(K = k)\n</code></pre>"},{"location":"crypto/otp/interleaved_demo_presentation/#ciphertext-distribution","title":"Ciphertext distribution","text":"<pre><code>noncomputable def \u03bcC {n : Nat} (\u03bcM : PMF (Plaintext n)) : \n  PMF (Ciphertext n) :=\n  PMF.bind (\u03bcMK \u03bcM) (fun mk =&gt; \n    PMF.pure (encrypt mk.1 mk.2))\n</code></pre>"},{"location":"crypto/otp/interleaved_demo_presentation/#key-lemma-1-xor-is-a-bijection","title":"Key Lemma 1: XOR is a Bijection","text":"<pre><code>def xorEquiv {n : \u2115} (m : Plaintext n) : Key n \u2243 Ciphertext n where\n  toFun   := encrypt m     -- k \u21a6 m \u2295 k\n  invFun  := vec_xor m     -- c \u21a6 m \u2295 c  \n  left_inv := by           -- m \u2295 (m \u2295 k) = k\n    intro k\n    apply ext\n    simp [encrypt, vec_xor, get_map\u2082, xor_aab_eq_b]\n  right_inv := by          -- (m \u2295 c) \u2295 m = c\n    intro c\n    apply ext\n    simp [encrypt, vec_xor, get_map\u2082, xor_aab_eq_b]\n</code></pre> <p>For fixed \\(m\\), the map \\(k \\mapsto m \\oplus k\\) is a bijection!</p>"},{"location":"crypto/otp/interleaved_demo_presentation/#let-me-demonstrate-why-this-bijection-property-is-so-important","title":"Let me demonstrate why this bijection property is so important...","text":"<pre><code>-- Demo 3: Bijection Property\nsection BijectionDemo\n  open OTP\n\n  -- Show that encryption with a fixed message is injective\n  example {n : Nat} (m : Plaintext n) (k\u2081 k\u2082 : Key n) \n    (h : encrypt m k\u2081 = encrypt m k\u2082) : k\u2081 = k\u2082 := by\n    -- Use the bijection property\n    have bij := xorEquiv m\n    -- Apply injectivity\n    exact bij.injective h\n\n  -- Show that for every ciphertext, there's a unique key\n  example {n : Nat} (m : Plaintext n) (c : Ciphertext n) :\n    \u2203! k : Key n, encrypt m k = c := by\n    use vec_xor m c\n    constructor\n    \u00b7 -- Existence\n      simp [encrypt, vec_xor, xor_aab_eq_b]\n    \u00b7 -- Uniqueness  \n      intro k hk\n      exact (key_uniqueness m k c).mp hk\nend BijectionDemo\n</code></pre> <p>Key insight: This bijection is what guarantees that ciphertexts are uniformly distributed!</p>"},{"location":"crypto/otp/interleaved_demo_presentation/#key-lemma-2-bijections-preserve-uniform-distributions","title":"Key Lemma 2: Bijections Preserve Uniform Distributions","text":"<pre><code>lemma map_uniformOfFintype_equiv\n    {\u03b1 \u03b2 : Type*} [Fintype \u03b1] [Fintype \u03b2] [DecidableEq \u03b2] \n    [Nonempty \u03b1] [Nonempty \u03b2] (e : \u03b1 \u2243 \u03b2) :\n    PMF.map e (uniformOfFintype \u03b1) = uniformOfFintype \u03b2\n</code></pre>"},{"location":"crypto/otp/interleaved_demo_presentation/#intuition","title":"Intuition","text":"<ul> <li>If we have a uniform distribution on \\(\\alpha\\)</li> <li>And apply a bijection \\(e : \\alpha \\to \\beta\\) </li> <li>We get a uniform distribution on \\(\\beta\\)</li> <li>Crucial: bijections preserve cardinality!</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#lets-see-how-this-applies-to-our-probability-calculations","title":"Let's see how this applies to our probability calculations...","text":"<pre><code>-- Demo 4: Probability Calculations\nsection ProbabilityDemo\n  open OTP PMF\n\n  -- The probability of any specific 3-bit key is 1/8\n  example : (\u03bcK (n := 3)) \u27e8[true, false, true], by decide\u27e9 = 1/8 := by\n    simp [\u03bcK, uniformOfFintype_apply]\n    -- Lean knows that card (Key 3) = 2^3 = 8\n    norm_num\n\n  -- The conditional probability P(C = c | M = m) is also 1/8\n  example (m : Plaintext 3) (c : Ciphertext 3) :\n    (\u03bcC_M m) c = 1/8 := by\n    rw [C_given_M_eq_inv_card_key]\n    norm_num\nend ProbabilityDemo\n</code></pre> <p>Notice: Both the key distribution and the conditional ciphertext distribution are uniform with the same probability!</p>"},{"location":"crypto/otp/interleaved_demo_presentation/#perfect-secrecy-statement","title":"Perfect Secrecy: Statement","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#informal-version","title":"Informal Version","text":"<p>For all messages \\(m\\) and ciphertexts \\(c\\):</p> \\[P(M = m | C = c) = P(M = m)\\]"},{"location":"crypto/otp/interleaved_demo_presentation/#lean-4-version","title":"Lean 4 Version","text":"<pre><code>theorem perfect_secrecy {n : Nat} (\u03bcM : PMF (Plaintext n)) \n  (m\u2080 : Plaintext n) (c\u2080 : Ciphertext n) :\n  (\u03bcC_M m\u2080) c\u2080 * \u03bcM m\u2080 / (\u03bcC \u03bcM) c\u2080 = \u03bcM m\u2080\n</code></pre> <p>Where:</p> <ul> <li><code>\u03bcC_M m\u2080</code> is the conditional distribution \\(P(C | M = m_0)\\)</li> <li><code>\u03bcC \u03bcM</code> is the marginal distribution \\(P(C)\\)</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#proof-strategy","title":"Proof Strategy","text":"<ol> <li>Show conditional distribution is uniform:</li> </ol> <p>\\[P(C = c | M = m) = \\frac{1}{2^n}\\]</p> <ol> <li>Show marginal distribution is uniform:</li> </ol> <p>\\[P(C = c) = \\frac{1}{2^n}\\]</p> <ol> <li> <p>Apply Bayes' theorem:</p> \\[\\begin{align*} P(M = m | C = c) =&amp; \\frac{P(C = c \\; | \\; M = m) \u00b7 P(M = m)}{P(C = c)}\\\\[8pt] &amp;= \\frac{2^{-n} \u00b7 P(M = m)}{2^{-n}}\\\\[8pt] &amp;= P(M = m) \\end{align*}\\] </li> </ol>"},{"location":"crypto/otp/interleaved_demo_presentation/#perfect-secrecy-visualization","title":"Perfect Secrecy Visualization","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#let-me-show-you-perfect-secrecy-in-action-with-a-small-example","title":"Let me show you perfect secrecy in action with a small example...","text":"<pre><code>-- Demo 5: Perfect Secrecy Visualization\nsection PerfectSecrecyDemo\n  open OTP\n\n  -- For a 2-bit OTP, let's verify perfect secrecy manually\n  -- Message: [true, false]\n  -- Key space has 4 elements: [false,false], [false,true], [true,false], [true,true]\n\n  def msg_10 : Plaintext 2 := \u27e8[true, false], by decide\u27e9\n\n  -- Each key gives a different ciphertext:\n  #eval encrypt msg_10 \u27e8[false, false], by decide\u27e9  -- [true, false]\n  #eval encrypt msg_10 \u27e8[false, true], by decide\u27e9   -- [true, true]\n  #eval encrypt msg_10 \u27e8[true, false], by decide\u27e9   -- [false, false]\n  #eval encrypt msg_10 \u27e8[true, true], by decide\u27e9    -- [false, true]\n\n  -- Key insight: Every possible ciphertext appears exactly once!\n  -- This is why the OTP has perfect secrecy.\nend PerfectSecrecyDemo\n</code></pre> <p>Critical observation: Each of the 4 possible 2-bit ciphertexts appears exactly once. This uniform mapping is the essence of perfect secrecy!</p>"},{"location":"crypto/otp/interleaved_demo_presentation/#common-pitfall-key-reuse","title":"Common Pitfall: Key Reuse","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#let-me-demonstrate-why-you-must-never-reuse-a-one-time-pad-key","title":"Let me demonstrate why you must NEVER reuse a one-time pad key...","text":"<pre><code>-- Demo 6: Common Pitfall - Key Reuse\nsection KeyReuse\n  open OTP\n\n  def msg1 : Plaintext 4 := \u27e8[true, false, true, false], by decide\u27e9\n  def msg2 : Plaintext 4 := \u27e8[false, true, false, true], by decide\u27e9\n  def shared_key : Key 4 := \u27e8[true, true, false, false], by decide\u27e9\n\n  def c1 := encrypt msg1 shared_key\n  def c2 := encrypt msg2 shared_key\n\n  -- If an attacker gets both ciphertexts, they can XOR them:\n  #eval vec_xor c1 c2\n  -- This equals vec_xor msg1 msg2 - the key cancels out!\n  #eval vec_xor msg1 msg2\n\n  -- Lesson: NEVER reuse a one-time pad key!\nend KeyReuse\n</code></pre> <p>Security lesson: When you XOR two ciphertexts encrypted with the same key, the key cancels out, leaving \\(m_1 \\oplus m_2\\). This leaks information about the messages!</p>"},{"location":"crypto/otp/interleaved_demo_presentation/#lessons-learned","title":"Lessons Learned","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#1-type-classes-matter","title":"1. Type Classes Matter","text":"<ul> <li><code>Fintype</code> for finite types</li> <li><code>Nonempty</code> to avoid division by zero</li> <li><code>DecidableEq</code> for computability</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#2-bijections-are-powerful","title":"2. Bijections are Powerful","text":"<ul> <li>XOR with fixed value is a bijection</li> <li>Bijections preserve uniform distributions</li> <li>Can transform complex sums using bijections</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#3-pmf-library-is-well-designed","title":"3. PMF Library is Well-Designed","text":"<ul> <li><code>bind</code> for dependent distributions  </li> <li><code>map</code> for transforming distributions</li> <li>Uniform distributions built-in</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#challenges-in-formalization","title":"Challenges in Formalization","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#1-vector-equality","title":"1. Vector Equality","text":"<ul> <li>Must use extensionality (<code>ext</code>)</li> <li>Reduce to element-wise proofs</li> <li><code>simp</code> is very helpful with <code>get_map\u2082</code></li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#2-infinite-sums","title":"2. Infinite Sums","text":"<ul> <li><code>tsum</code> requires careful manipulation</li> <li>Product types need <code>tsum_prod'</code></li> <li>Conditional sums use <code>tsum_ite_eq</code></li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#3-real-number-arithmetic","title":"3. Real Number Arithmetic","text":"<ul> <li>Coercion between <code>Nat</code>, <code>NNReal</code>, <code>ENNReal</code></li> <li>Division requires non-zero denominators</li> <li>Must track when values are finite</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#future-directions","title":"Future Directions","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#extensions","title":"Extensions","text":"<ol> <li> <p>Other Cryptographic Constructions</p> <ul> <li>Stream ciphers</li> <li>Block ciphers (with appropriate modes)</li> <li>Public key encryption</li> </ul> </li> <li> <p>Advanced Probability</p> <ul> <li>Computational indistinguishability</li> <li>Negligible functions</li> <li>Probabilistic polynomial time</li> </ul> </li> <li> <p>Security Proofs</p> <ul> <li>Semantic security</li> <li>CPA/CCA security</li> <li>Reduction proofs</li> </ul> </li> </ol>"},{"location":"crypto/otp/interleaved_demo_presentation/#takeaways","title":"Takeaways","text":"<ul> <li>Lean 4 + Mathlib provides excellent support for probability</li> <li>Type-driven development helps catch errors early</li> <li>Bijections are a key tool in cryptographic proofs</li> <li>Perfect secrecy is elegantly expressible and provable</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#resources","title":"Resources","text":"<ul> <li>General</li> <li>Lean site: https://lean-lang.org/</li> <li>Lean docs: https://lean-lang.org/documentation/ </li> <li> <p>Mathlib docs: https://leanprover-community.github.io/mathlib4_docs/</p> </li> <li> <p>For this demo</p> </li> <li> <p>Slides: https://formalmethods.io/crypto</p> </li> <li>Lean code: https://github.com/formalverification/lean4crypto/</li> </ul>"},{"location":"crypto/otp/interleaved_demo_presentation/#questions","title":"Questions?","text":""},{"location":"crypto/otp/interleaved_demo_presentation/#quick-reference","title":"Quick Reference","text":"<ul> <li><code>PMF \u03b1</code> - Probability mass function over type <code>\u03b1</code></li> <li><code>uniformOfFintype</code> - Uniform distribution</li> <li><code>List.Vector</code> - Fixed-length vectors</li> <li><code>ENNReal</code> - Extended non-negative reals</li> <li><code>\u2243</code> - Type equivalence (bijection)</li> </ul> <p>Thank you!</p>"},{"location":"crypto/otp/otp-lean/","title":"OTP in L\u2203\u2200N","text":""},{"location":"crypto/otp/otp-lean/#initial-considerations","title":"Initial Considerations","text":"<ul> <li>What types for messages, keys, ciphertexts? (<code>Vector Bool n</code> is a good candidate, or <code>Fin n \u2192 Bool</code>).</li> <li>How to represent the XOR operation on these types?</li> <li>Which Mathlib probability definitions will you need? (e.g., <code>PMF</code>, <code>Pure</code>, <code>Bind</code> for random variables, <code>cond</code> for conditional probability).</li> </ul>"},{"location":"crypto/otp/otp-lean/#types","title":"Types","text":"<pre><code>def Plaintext (n : Nat) := Vector Bool n\ndef Key (n : Nat) := Vector Bool n\ndef Ciphertext (n : Nat) := Vector Bool n\n</code></pre> <p>Using <code>n : Nat</code> so definitions are generic for any length.</p>"},{"location":"crypto/otp/otp-lean/#xor-operation","title":"XOR Operation","text":"<p>We need a function like</p> <pre><code>xor_vector {n : Nat} (v\u2081 v\u2082 : Vector Bool n) : Vector Bool n\n</code></pre> <p>This can be defined using <code>Vector.map\u2082 Bool.xor v\u2081 v\u2082</code>.</p>"},{"location":"crypto/otp/otp-lean/#mathlib-probability-definitions","title":"Mathlib Probability Definitions","text":"<ul> <li> <p>Message Distribution (<code>PMF (Plaintext n)</code>): The perfect secrecy definition usually assumes some distribution for messages. </p> <p>We might leave this as arbitrary <code>(\u03bc_M : PMF (Plaintext n))</code> in our theorem statement.</p> </li> <li> <p>Key Distribution (<code>PMF (Key n)</code>): must be uniform, so we need to define what <code>is_uniform (\u03bc_K : PMF (Key n))</code> means.</p> <p>Typically, for a finite type <code>\u03b1</code>, a <code>PMF p</code> is uniform if <code>p a = 1 / Fintype.card \u03b1</code> for all <code>a</code>.</p> <p>Mathlib should have utilities for this (e.g., <code>PMF.uniformOfFintype</code>).</p> </li> <li> <p>Ciphertext Distribution: derived from message and key distributions using <code>PMF.bind</code> or <code>PMF.map</code> to represent the encryption process.</p> </li> <li> <p>Conditional Probability: <code>PMF.cond</code> will be key to defining \\(\u2119(M=m \\;| \\;C=c)\\).</p> </li> </ul>"},{"location":"crypto/otp/otp-lean/#lean-4-project-setup","title":"Lean 4 Project Setup \uc14b\uc5c5","text":"<ol> <li> <p>Create the Project.</p> <p>In a terminal, <pre><code>lake new OTP math\ncd OTP\n</code></pre></p> </li> <li> <p>Verfiy Mathlib Dependency.</p> <p>The <code>lakefile.toml</code> should look something like this:</p> <pre><code>name = \"OTP\"\nversion = \"0.1.0\"\nkeywords = [\"math\"]\ndefaultTargets = [\"OTP\"]\n\n[leanOptions]\npp.unicode.fun = true # pretty-prints `fun a \u21a6 b`\nautoImplicit = false\n\n[[require]]\nname = \"mathlib\"\nscope = \"leanprover-community\"\n\n[[lean_lib]]\nname = \"OTP\"\n</code></pre> </li> <li> <p>Fetch Mathlib:     In your terminal (in the <code>otp_formalization</code> directory):     <pre><code>lake update\n</code></pre>     This might take a few minutes the first time. Then build to ensure it's working:     <pre><code>lake build\n</code></pre></p> </li> <li> <p>Create Main File.</p> <ul> <li>The <code>lake new</code> command creates <code>OTP.lean</code> and <code>OTP/Basic.lean</code>.</li> <li>We'll start the formalization in <code>OTP/Basic.lean</code> which is imported into <code>OTP.lean</code>.</li> </ul> </li> </ol>"},{"location":"crypto/otp/otp-lean/#initial-definitions","title":"Initial Definitions \u270d\ufe0f","text":"<p>In <code>OTP/Basic.lean</code>,</p> <pre><code>import Mathlib.Data.Vector.Basic\n\nnamespace OTP\n\n  def Plaintext (n : Nat) := Vector Bool n\n  def Key (n : Nat) := Vector Bool n\n  def Ciphertext (n : Nat) := Vector Bool n\n\n  -- Element-wise XOR for Vectors\n  def xor_vector {n : Nat} (v\u2081 v\u2082 : Vector Bool n) : Vector Bool n :=\n    Vector.zipWith Bool.xor v\u2081 v\u2082\n    -- Or more explicitly:\n    -- Vector.ofFn (fun i =&gt; Bool.xor (v\u2081.get i) (v\u2082.get i))\n\n  def encrypt {n : Nat} (p : Plaintext n) (k : Key n) : Ciphertext n :=\n    xor_vector p k\n\n  def decrypt {n : Nat} (c : Ciphertext n) (k : Key n) : Ciphertext n :=\n    xor_vector c k\n\n  -- Let's test with a simple example if we can construct vectors\n  -- To make this evaluable, we need a concrete n and ways to make vectors.\n  -- For example:\n  def ex_plaintext : Plaintext 3 := \u27e8#[true, false, true], by decide\u27e9 -- Using constructor for clarity\n\n  -- Or using the direct constructor...\n  def ex_plaintext' : Plaintext 3 := \u27e8#[true, false, true], by rfl\u27e9 -- by rfl or by decide usually works for length proofs\n  def ex_key : Key 3 := \u27e8#[false, true, true], by decide\u27e9\n\n  #eval encrypt ex_plaintext ex_key\n  -- Expected output: vector of ![true, true, false] (or similar representation)\n\n  def ex_ciphertext : Ciphertext 3 := encrypt ex_plaintext ex_key\n  #eval decrypt ex_ciphertext ex_key\n  -- Expected output: vector of ![true, false, true]\n\nend OTP\n</code></pre>"},{"location":"crypto/otp/perfect-secrecy/","title":"OTP: Perfect Secrecy","text":"<p>Theorem 2.9 (Katz &amp; Lindell, 2ed)</p> <p>The one-time pad encryption scheme is perfectly secret.</p> Proof of Theorem 2.9 \u270d\ufe0f <ul> <li>Let \\(C\\) and \\(M\\) be r.v.s from arbitrary, fixed distributions over \\(\u2133\\) and \\(\ud835\udc9e\\), resp.</li> <li>Let \\(K\\) be a r.v. from the uniform distribution over \\(\ud835\udca6\\).</li> </ul> <p>Goal \ud83e\udd45</p> <p>If \\(m \u2208 \u2133\\), \\(c \u2208 \ud835\udc9e\\) and \\(\u2119(C = c) &gt; 0\\), then \\(\u2119 (M = m \\; | \\; C = c) = \u2119(M = m)\\).</p> <p>We first show what amounts to \"\\(C\\) is uniform if \\(K\\) is uniform, regardless of \\(M\\).\"</p> <p>Compute \\(\u2119(C = c \\; | \\; M = m )\\) for arbitrary \\(c \u2208 \ud835\udc9e\\) and \\(m \u2208 \u2133\\): \\[\u2119 (C = c \\; | \\; M = m) = \u2119 (\\mathrm{Enc}_k (m) = c) = \u2119(k \u2295 m = c)= \u2119(k = m \u2295 c)= 2^{-n},\\]</p> <p>since \\(k\\) is chosen from a uniform distribution over the set \\(\ud835\udca6\\) of \\(n\\)-bit strings.</p> <p>For \\(c \u2208 \ud835\udc9e\\),</p> <p>\\[\u2119 (C = c) = \u2211_{m \u2208 \u2133} \u2119 (C = c \\; | \\; M = m) \u00b7 \u2119(M = m) = 2^{-n} \u2211_{m \u2208 \u2133} \u2119(M = m) = 2^{-n}.\\] </p> <p>Finally, by Bayes' Theorem,</p> \\[\\begin{align*} \u2119(M = m \\; | \\; C = c) &amp;= \\frac{\u2119(C = c \\; | \\; M = m) \u00b7 \u2119(M = m)}{\u2119(C = c)}\\\\                        &amp;= \\frac{2^{-n} \u00b7 \u2119(M = m)}{2^{-n}} = \u2119(M = m). \\end{align*}\\] <p>\u220e</p>"},{"location":"crypto/otp/slides/","title":"Formalizing Discrete Probability in Lean 4: The One-Time Pad","text":""},{"location":"crypto/otp/slides/#fm-crypto-meeting","title":"FM Crypto Meeting","text":""},{"location":"crypto/otp/slides/#overview","title":"Overview","text":"<ul> <li>Goal: Formalize basic discrete probability in Lean 4</li> <li>Case Study: One-Time Pad (OTP) and Perfect Secrecy</li> <li>Key Concepts:</li> <li>Probability Mass Functions (PMFs)</li> <li>Independence and joint distributions</li> <li>Conditional probability</li> <li>Bijections preserving uniform distributions</li> </ul>"},{"location":"crypto/otp/slides/#the-one-time-pad","title":"The One-Time Pad","text":""},{"location":"crypto/otp/slides/#informal-definition","title":"Informal Definition","text":"<ul> <li>Message space: \\(M = \\{0,1\\}^n\\)</li> <li>Key space: \\(K = \\{0,1\\}^n\\) </li> <li>Ciphertext space: \\(C = \\{0,1\\}^n\\)</li> <li>Encryption: \\(\\text{Enc}(m, k) = m \\oplus k\\)</li> <li>Decryption: \\(\\text{Dec}(c, k) = c \\oplus k\\)</li> </ul>"},{"location":"crypto/otp/slides/#key-property","title":"Key Property","text":"\\[\\text{Dec}(\\text{Enc}(m, k), k) = (m \\oplus k) \\oplus k = m\\]"},{"location":"crypto/otp/slides/#lean-4-formalization-types","title":"Lean 4 Formalization: Types","text":"<pre><code>import Mathlib.Data.Vector.Basic\n\ndef Plaintext  (n : Nat) := List.Vector Bool n\ndef Key        (n : Nat) := List.Vector Bool n  \ndef Ciphertext (n : Nat) := List.Vector Bool n\n\n-- Element-wise XOR\ndef vec_xor {n : Nat} (v\u2081 v\u2082 : List.Vector Bool n) := \n  map\u2082 xor v\u2081 v\u2082\n\ndef encrypt {n : Nat} (m : Plaintext n) (k : Key n) : Ciphertext n :=\n  vec_xor m k\n</code></pre>"},{"location":"crypto/otp/slides/#correctness-of-encryptiondecryption","title":"Correctness of Encryption/Decryption","text":"<pre><code>lemma encrypt_decrypt {n : Nat} (m : Plaintext n) (k : Key n) :\n  decrypt (encrypt m k) k = m := by\n  unfold encrypt decrypt vec_xor\n  apply ext  -- vector extensionality\n  intro i    -- prove element-wise\n  simp only [get_map\u2082]\n  -- Goal: xor (xor (get m i) (get k i)) (get k i) = get m i\n  simp  -- Uses xor properties automatically\n</code></pre> <p>Key insight: Reduce vector equality to element-wise boolean equality</p>"},{"location":"crypto/otp/slides/#probability-mass-functions-in-lean-4","title":"Probability Mass Functions in Lean 4","text":""},{"location":"crypto/otp/slides/#mathlibs-pmf-type","title":"Mathlib's PMF type","text":"<pre><code>import Mathlib.Probability.ProbabilityMassFunction.Constructions\n\n-- PMF \u03b1 represents discrete probability distributions over \u03b1\n-- (\u03bc : PMF \u03b1) assigns probability \u03bc a to element a : \u03b1\n</code></pre>"},{"location":"crypto/otp/slides/#uniform-distribution-over-keys","title":"Uniform distribution over keys","text":"<pre><code>noncomputable def \u03bcK {n : \u2115} : PMF (Key n) :=\n  uniformOfFintype (Key n)\n\n-- For any key k: \u03bcK k = 1 / 2^n\n</code></pre>"},{"location":"crypto/otp/slides/#independence-and-joint-distributions","title":"Independence and Joint Distributions","text":""},{"location":"crypto/otp/slides/#independent-product-of-pmfs","title":"Independent product of PMFs","text":"<pre><code>noncomputable def \u03bcMK {n : \u2115} (\u03bcM : PMF (Plaintext n)) : \n  PMF (Plaintext n \u00d7 Key n) :=\n  PMF.bind \u03bcM (fun m =&gt; PMF.map (fun k =&gt; (m, k)) \u03bcK)\n\n-- P(M = m, K = k) = P(M = m) \u00b7 P(K = k)\n</code></pre>"},{"location":"crypto/otp/slides/#ciphertext-distribution","title":"Ciphertext distribution","text":"<pre><code>noncomputable def \u03bcC {n : Nat} (\u03bcM : PMF (Plaintext n)) : \n  PMF (Ciphertext n) :=\n  PMF.bind (\u03bcMK \u03bcM) (fun mk =&gt; \n    PMF.pure (encrypt mk.1 mk.2))\n</code></pre>"},{"location":"crypto/otp/slides/#key-lemma-1-xor-is-a-bijection","title":"Key Lemma 1: XOR is a Bijection","text":"<pre><code>def xorEquiv {n : \u2115} (m : Plaintext n) : Key n \u2243 Ciphertext n where\n  toFun   := encrypt m     -- k \u21a6 m \u2295 k\n  invFun  := vec_xor m     -- c \u21a6 m \u2295 c  \n  left_inv := by           -- m \u2295 (m \u2295 k) = k\n    intro k\n    apply ext\n    simp [encrypt, vec_xor, get_map\u2082, xor_aab_eq_b]\n  right_inv := by          -- (m \u2295 c) \u2295 m = c\n    intro c\n    apply ext\n    simp [encrypt, vec_xor, get_map\u2082, xor_aab_eq_b]\n</code></pre> <p>For fixed \\(m\\), the map \\(k \\mapsto m \\oplus k\\) is a bijection!</p>"},{"location":"crypto/otp/slides/#key-lemma-2-bijections-preserve-uniform-distributions","title":"Key Lemma 2: Bijections Preserve Uniform Distributions","text":"<pre><code>lemma map_uniformOfFintype_equiv\n    {\u03b1 \u03b2 : Type*} [Fintype \u03b1] [Fintype \u03b2] [DecidableEq \u03b2] \n    [Nonempty \u03b1] [Nonempty \u03b2] (e : \u03b1 \u2243 \u03b2) :\n    PMF.map e (uniformOfFintype \u03b1) = uniformOfFintype \u03b2\n</code></pre>"},{"location":"crypto/otp/slides/#intuition","title":"Intuition","text":"<ul> <li>If we have a uniform distribution on \\(\\alpha\\)</li> <li>And apply a bijection \\(e : \\alpha \\to \\beta\\) </li> <li>We get a uniform distribution on \\(\\beta\\)</li> <li>Crucial: bijections preserve cardinality!</li> </ul>"},{"location":"crypto/otp/slides/#perfect-secrecy-statement","title":"Perfect Secrecy: Statement","text":""},{"location":"crypto/otp/slides/#informal-version","title":"Informal Version","text":"<p>For all messages \\(m\\) and ciphertexts \\(c\\):</p> \\[P(M = m \\; | \\; C = c) = P(M = m)\\]"},{"location":"crypto/otp/slides/#lean-4-version","title":"Lean 4 Version","text":"<pre><code>theorem perfect_secrecy {n : Nat} (\u03bcM : PMF (Plaintext n)) \n  (m\u2080 : Plaintext n) (c\u2080 : Ciphertext n) :\n  (\u03bcC_M m\u2080) c\u2080 * \u03bcM m\u2080 / (\u03bcC \u03bcM) c\u2080 = \u03bcM m\u2080\n</code></pre> <p>Where:</p> <ul> <li><code>\u03bcC_M m\u2080</code> is the conditional distribution \\(P(C \\; | \\; M = m_0)\\)</li> <li><code>\u03bcC \u03bcM</code> is the marginal distribution \\(P(C)\\)</li> </ul>"},{"location":"crypto/otp/slides/#proof-strategy","title":"Proof Strategy","text":"<ol> <li> <p>Show conditional distribution is uniform:</p> \\[P(C = c \\; | \\; M = m) = 2^{-n}\\] </li> <li> <p>Show marginal distribution is uniform:</p> \\[P(C = c) = 2^{-n}\\] </li> <li> <p>Apply Bayes' theorem:</p> \\[\\begin{align*} P(M = m | C = c) =&amp; \\frac{P(C = c \\; | \\; M = m) \u00b7 P(M = m)}{P(C = c)}\\\\[8pt] &amp;= \\frac{2^{-n} \u00b7 P(M = m)}{2^{-n}}\\\\[8pt] &amp;= P(M = m) \\end{align*}\\] </li> </ol>"},{"location":"crypto/otp/slides/#step-1-conditional-distribution-is-uniform","title":"Step 1: Conditional Distribution is Uniform","text":"<pre><code>lemma C_given_M_eq_inv_card_key {n : \u2115} \n  (m : Plaintext n) (c : Ciphertext n) :\n  (\u03bcC_M m) c = 1 / card (Key n) := by\n  -- \u03bcC_M m = map (encrypt m) \u03bcK\n  -- encrypt m is a bijection (xorEquiv m)\n  -- So map (encrypt m) \u03bcK = uniformOfFintype (Ciphertext n)\n  have h\u03bc : \u03bcC_M m = uniformOfFintype (Ciphertext n) := by\n    apply map_uniformOfFintype_equiv (xorEquiv m)\n  simpa [h\u03bc, uniformOfFintype_apply]\n    using card_congr (xorEquiv m)\n</code></pre>"},{"location":"crypto/otp/slides/#step-2-marginal-distribution-is-uniform","title":"Step 2: Marginal Distribution is Uniform","text":"<pre><code>lemma prob_C_uniform_ennreal {n : Nat} (\u03bcM : PMF (Plaintext n)) \n  (c : Ciphertext n) :\n  (\u03bcC \u03bcM) c = (card (Key n) : ENNReal)\u207b\u00b9\n</code></pre>"},{"location":"crypto/otp/slides/#key-insight","title":"Key insight:","text":"<ul> <li>For each \\(m\\), there's exactly one \\(k\\) such that \\(m \\oplus k = c\\)</li> <li>Namely, \\(k = m \\oplus c\\)</li> <li>So we can rewrite the sum over \\((m,k)\\) pairs as a sum over \\(m\\) alone</li> </ul>"},{"location":"crypto/otp/slides/#working-with-ennreal","title":"Working with ENNReal","text":""},{"location":"crypto/otp/slides/#challenge-division-in-probability","title":"Challenge: Division in probability","text":"<ul> <li>PMFs use <code>NNReal</code> (non-negative reals)</li> <li>Division requires <code>ENNReal</code> (extended non-negative reals)</li> <li>Need to handle \\(0\\) and \\(\\infty\\) carefully</li> </ul>"},{"location":"crypto/otp/slides/#key-properties-used","title":"Key properties used:","text":"<pre><code>-- For x \u2260 0 and x \u2260 \u221e:\nx * y / x = y\n\n-- Uniform distribution has probability 1/|S|\n(uniformOfFintype S) s = (card S)\u207b\u00b9\n</code></pre>"},{"location":"crypto/otp/slides/#lessons-learned","title":"Lessons Learned","text":""},{"location":"crypto/otp/slides/#1-type-classes-matter","title":"1. Type Classes Matter","text":"<ul> <li><code>Fintype</code> for finite types</li> <li><code>Nonempty</code> to avoid division by zero</li> <li><code>DecidableEq</code> for computability</li> </ul>"},{"location":"crypto/otp/slides/#2-bijections-are-powerful","title":"2. Bijections are Powerful","text":"<ul> <li>XOR with fixed value is a bijection</li> <li>Bijections preserve uniform distributions</li> <li>Can transform complex sums using bijections</li> </ul>"},{"location":"crypto/otp/slides/#3-pmf-library-is-well-designed","title":"3. PMF Library is Well-Designed","text":"<ul> <li><code>bind</code> for dependent distributions  </li> <li><code>map</code> for transforming distributions</li> <li>Uniform distributions built-in</li> </ul>"},{"location":"crypto/otp/slides/#challenges-in-formalization","title":"Challenges in Formalization","text":""},{"location":"crypto/otp/slides/#1-vector-equality","title":"1. Vector Equality","text":"<ul> <li>Must use extensionality (<code>ext</code>)</li> <li>Reduce to element-wise proofs</li> <li><code>simp</code> is very helpful with <code>get_map\u2082</code></li> </ul>"},{"location":"crypto/otp/slides/#2-infinite-sums","title":"2. Infinite Sums","text":"<ul> <li><code>tsum</code> requires careful manipulation</li> <li>Product types need <code>tsum_prod'</code></li> <li>Conditional sums use <code>tsum_ite_eq</code></li> </ul>"},{"location":"crypto/otp/slides/#3-real-number-arithmetic","title":"3. Real Number Arithmetic","text":"<ul> <li>Coercion between <code>Nat</code>, <code>NNReal</code>, <code>ENNReal</code></li> <li>Division requires non-zero denominators</li> <li>Must track when values are finite</li> </ul>"},{"location":"crypto/otp/slides/#demo-interactive-proof-development","title":"Demo: Interactive Proof Development","text":"<p>Let's see how Lean 4's tactics work in practice:</p> <pre><code>example {n : Nat} (m : Plaintext n) (k : Key n) :\n  encrypt m k = encrypt m k := by\n  -- Lean's proof state shows current goal\n  rfl  -- reflexivity\n\nexample {n : Nat} (m : Plaintext n) (k\u2081 k\u2082 : Key n) \n  (h : encrypt m k\u2081 = encrypt m k\u2082) : k\u2081 = k\u2082 := by\n  -- Use key uniqueness\n  have h_unique := key_uniqueness m k\u2081 (encrypt m k\u2082)\n  rw [h_unique.mp h]\n  -- Alternative: use xorEquiv directly\n</code></pre>"},{"location":"crypto/otp/slides/#future-directions","title":"Future Directions","text":""},{"location":"crypto/otp/slides/#extensions","title":"Extensions","text":"<ol> <li> <p>Other Cryptographic Constructions</p> <ul> <li>Stream ciphers</li> <li>Block ciphers (with appropriate modes)</li> <li>Public key encryption</li> </ul> </li> <li> <p>Advanced Probability</p> <ul> <li>Computational indistinguishability</li> <li>Negligible functions</li> <li>Probabilistic polynomial time</li> </ul> </li> <li> <p>Security Proofs</p> <ul> <li>Semantic security</li> <li>CPA/CCA security</li> <li>Reduction proofs</li> </ul> </li> </ol>"},{"location":"crypto/otp/slides/#takeaways","title":"Takeaways","text":"<ul> <li>Lean 4 + Mathlib provides excellent support for probability</li> <li>Type-driven development helps catch errors early</li> <li>Bijections are a key tool in cryptographic proofs</li> <li>Perfect secrecy is elegantly expressible and provable</li> </ul>"},{"location":"crypto/otp/slides/#resources","title":"Resources","text":"<ul> <li>General</li> <li>Lean site: https://lean-lang.org/</li> <li>Lean docs: https://lean-lang.org/documentation/ </li> <li> <p>Mathlib docs: https://leanprover-community.github.io/mathlib4_docs/</p> </li> <li> <p>For this demo</p> </li> <li> <p>Slides: https://formalmethods.io/crypto</p> </li> <li>Code: https://github.com/formalverification/lean4crypto/</li> </ul>"},{"location":"crypto/otp/slides/#questions","title":"Questions?","text":""},{"location":"crypto/otp/slides/#quick-reference","title":"Quick Reference","text":"<ul> <li><code>PMF \u03b1</code> - Probability mass function over type <code>\u03b1</code></li> <li><code>uniformOfFintype</code> - Uniform distribution</li> <li><code>List.Vector</code> - Fixed-length vectors</li> <li><code>ENNReal</code> - Extended non-negative reals</li> <li><code>\u2243</code> - Type equivalence (bijection)</li> </ul> <p>Thank you!</p>"},{"location":"mkdocs/admonitions/","title":"Admonitions","text":"<p>From the markdown...</p> <p><pre><code>!!! note \"Title of the callout\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> ...MkDocs produces:</p> <p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"mkdocs/admonitions/#collapsible-callouts","title":"Collapsible callouts","text":"<p>From the markdown... </p> <pre><code>??? info \"Collapsible callout\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>... MkDocs produces:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"mkdocs/code-blocks/","title":"Code blocks","text":"<pre><code>    ```py title=\"add_numbers.py\" linenums=\"1\" hl_lines=\"2-4\"\n    # Function to add two numbers\n    def add_two_numbers(num1, num2):\n        return num1 + num2\n\n    # Example usage\n    result = add_two_numbers(5, 3)\n    print('The sum is:', result)\n    ```\n</code></pre> <p>produces</p> add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"mkdocs/content-tabs/","title":"Content tabs","text":""},{"location":"mkdocs/content-tabs/#generic-content","title":"Generic Content","text":"<p>From the markdown...</p> <pre><code>=== \"Plain text\"\n\n    This is some plain text\n\n=== \"Unordered list\"\n\n    * First item\n    * Second item\n    * Third item\n\n=== \"Ordered list\"\n\n    1. First item\n    2. Second item\n    3. Third item\n</code></pre> <p>...MkDocs produces</p> Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"mkdocs/content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"<p>From the markdown...</p> <pre><code>=== \"Python\"\n\n    ```py\n    def main():\n        print(\"Hello world!\")\n\n    if __name__ == \"__main__\":\n        main()\n    ```\n\n=== \"JavaScript\"\n\n    ```js\n    function main() {\n        console.log(\"Hello world!\");\n    }\n\n    main();\n    ```\n</code></pre> <p>...MkDocs produces</p> PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"mkdocs/diagrams/","title":"Diagram Examples","text":""},{"location":"mkdocs/diagrams/#flowcharts","title":"Flowcharts","text":"<p>From the markdown...</p> <pre><code>    ```mermaid\n    graph LR\n      A[Start] --&gt; B{Failure?};\n      B --&gt;|Yes| C[Investigate...];\n      C --&gt; D[Debug];\n      D --&gt; B;\n      B ----&gt;|No| E[Success!];\n    ```\n</code></pre> <p>...MkDocs produces</p> <pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"mkdocs/diagrams/#sequence-diagrams","title":"Sequence Diagrams","text":"<p>From the markdown...</p> <p><pre><code>    ```mermaid\n    sequenceDiagram\n      autonumber\n      Server-&gt;&gt;Terminal: Send request\n      loop Health\n          Terminal-&gt;&gt;Terminal: Check for health\n      end\n      Note right of Terminal: System online\n      Terminal--&gt;&gt;Server: Everything is OK\n      Terminal-&gt;&gt;Database: Request customer data\n      Database--&gt;&gt;Terminal: Customer data\n    ```\n</code></pre> ...MkDocs produces</p> <pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"}]}